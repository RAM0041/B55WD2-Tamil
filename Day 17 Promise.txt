Day 17 - Promise

Task:

function a1(){
    function a2(){
        function a3(){
            console.log('This is CB');
        }
    }
}

Promise: it holds the result of Async operation.
Need of Promise: to overcome callback hell scenerio.
it is an object, which holds the result of Async operation.

Syntax: var variableName = new Promise((resolve, reject));

for every Promise object we have state,
1. Pending
2. Fulfilled(resolved)
3. Reject

var a = new Promise((resolve, reject)=>{
    if(5>0){
        resolve("Resolved");
    } else {
        reject("Rejected");
    }
})

console.log(a);

// Task - 18 you are eligible to vote / 17 not eligible to vote -----> prompt, promise

var age = prompt("Enter your age!")
var a = new Promise((resolve, reject)=>{
    if(age>=18){
        resolve("You are Eligible to Vote!");
    } else {
        reject("Sorry Kid! You are not eligible to Vote!");
    }
})

console.log(a);

Example: .then, .catch

var age = prompt("Enter your age!")
var a = new Promise((resolve, reject)=>{
    if(age>=18){
        resolve("You are Eligible to Vote!");
    } else {
        reject("Sorry Kid! You are not eligible to Vote!");
    }
})

// console.log(a);
a.then((data)=> console.log(data)).catch((err)=>console.log(err));

// if function return promise
// if both resolve and reject is given it depend on order
function find(num){
    return new Promise((resolve, reject)=>{
        reject("This is reject"+ num);
        resolve("This is resolve"+ num);
    })
}

find(5).then((da)=> console.log(da)).catch((error)=>console.log(error))

// Chaining of promise
// Dependent operation
// the result of first will be served as input to second.

function chain(num){
    return new Promise((resolve, reject)=> setTimeout(()=> resolve(num*2),2000))
};
    chain(5).then((data)=>{
        // chain(5*2 = 10)
        console.log(data);
        return chain(data);
    }).then((data1)=>{
        // chain(10*2 = 20)
        console.log(data1);
        return chain(data1)
    }).then((data2)=>console.log(data2));

// Promise.all()
// when you have multiple promise
// it will wait until all the promise are getting resolved
// and then it returns an array of value

// Draw Back
// if one promise is rejected it won't go for other.
// it will display the information of the rejected promise.

var p1 = new Promise((resolve, reject)=>{
    if(true){
        setTimeout(()=>resolve("P1 is resolved"), 3000);
    } else {
        setTimeout(()=>reject("P1 is rejected"), 4000);
    }
})

var p2 = new Promise((resolve, reject)=>{
    if(false){
        setTimeout(()=>resolve("P2 is resolved"), 2000);
    } else {
        setTimeout(()=>reject("P2 is rejected"), 4000);
    }
})

var p3 = new Promise((resolve, reject)=>{
    if(true){
        setTimeout(()=>resolve("P3 is resolved"), 4000);
    } else {
        setTimeout(()=>reject("P3 is rejected"), 4000);
    }
})

Promise.all([p1, p2, p3]).then((data)=>console.log(data)).catch((err)=>console.log(err));
